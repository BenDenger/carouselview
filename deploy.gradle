/**
 * Build Script for Library Publication
 *
 * Author: Sunny Chung
 */

apply plugin: 'signing'


// parse property file as build script variables
["library.properties", "deploy.properties"].each { filename ->
    File file = file(filename)
    if (file.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file))
        props.each { prop ->
            project.ext.set(prop.key, prop.value)
//            println "${prop.key} -> ${prop.value}"
        }
    }
}

if (project.ext.hasProperty('group')) {
    project.group = project.ext.group
    project.archivesBaseName = project.ext.archivesBaseName
    project.version = project.ext.version
}

signing {
    required { project.hasProperty("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        if (project.hasProperty('bintrayRepo')) {
            repository(url: bintrayRepo) {
                authentication(userName: bintrayUsername, password: bintrayKey)
            }
        }

        if (project.hasProperty('sonatypeRepo')) {
            repository(url: sonatypeRepo) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
        }
    }
}

afterEvaluate { project ->

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar, dependsOn: javadoc) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
//    from android.sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

}
